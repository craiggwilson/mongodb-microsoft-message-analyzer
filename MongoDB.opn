protocol MongoDB with 
BinaryEncodingDefaults{Endian = Endian.Little, TextEncoding = TextEncoding.UTF8},
Documentation
{
    ProtocolName = "MongoDB Wire Protocol",
    ShortName = "MongoDB",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) MongoDB",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0.0", Date = "03/16/2015"}
        ]
};

using BSON;
using Standard;
using Utility;
using TCP;
using Configurations;

annotation bool MongoDB.Message#IsRequest;
annotation ushort MongoDB.Message#SourcePort;
annotation ushort MongoDB.Message#DestinationPort;

endpoint Server 
    over TCP.Server
    accepts MongoDB.Message issues MongoDB.Message;

client endpoint Client connected to Server;

const set<ushort> DefaultPorts = {27017};

type MongoDBConfiguration
{
    set<ushort> MongoDBPorts = {} with Configurable {Description = "Add MongoDB ports (CSV delimited)"};
} with Configurable{Category = "MongoDB"};

autostart actor MongoDBOverTCP(TCP.Server server)
{
	MongoDBDecodingHelper mongoDBDecodingHelper;
	MongoDBConfiguration config = GetConfigurableValue<MongoDBConfiguration>();

	process server accepts s:TCP.Segment where (s.DestinationPort in DefaultPorts || s.DestinationPort in config.MongoDBPorts)
	{
		if (mongoDBDecodingHelper == null)
		{
			mongoDBDecodingHelper = new MongoDBDecodingHelper();
			mongoDBDecodingHelper.InitializeMongoDBDecodingHelper(server, s.DestinationPort, s.SourcePort);
		}

		mongoDBDecodingHelper.TryDecode(s, MessageDirection.Accepts);
	}

	process server issues s:TCP.Segment where (s.SourcePort in DefaultPorts || s.SourcePort in config.MongoDBPorts)
	{
		if (mongoDBDecodingHelper == null)
		{
			mongoDBDecodingHelper = new MongoDBDecodingHelper();
			mongoDBDecodingHelper.InitializeMongoDBDecodingHelper(server, s.SourcePort, s.DestinationPort);
		}

        mongoDBDecodingHelper.TryDecode(s, MessageDirection.Issues);
	}

	~endpoint(TCP.Server server)
    {
        if (mongoDBDecodingHelper != null)
        {
            mongoDBDecodingHelper.ClearInDestructor();
        }
    }
}

message Message
{
	int MessageLength;
	int RequestID;
	int ResponseTo;
	MsgBody Body;

	override string ToString()
	{
		string summary = "";
		if(this#IsRequest != nothing && this#IsRequest as bool)
		{
			summary += "RequestID:" + RequestID.ToString() + ", Length: " + MessageLength.ToString();
		}
		else
		{
			summary += "ResponseTo: " + ResponseTo.ToString() + ", Length: " + MessageLength.ToString();
		}

		switch(Body)
		{
			case b:OpReplyMsgBody =>
				summary = "OpCode: OP_REPLY, " + summary + ", CursorID: " + b.CursorID.ToString() + ", NumberReturned: " + b.NumberReturned.ToString();
			case b:OpMsgMsgBody => 
				summary = "OpCode: OP_MSG, " + summary + ", Message: " + b.Message.ToString();
			case b:OpUpdateMsgBody => 
				summary = "OpCode: OP_UPDATE, " + summary + ", FullCollectionName: " + b.FullCollectionName.ToString();
			case b:OpInsertMsgBody => 
				summary = "OpCode: OP_INSERT, " + summary + ", FullCollectionName: " + b.FullCollectionName.ToString() + ", NumberOfDocuments: " + b.Documents.Count.ToString();
			case b:OpQueryMsgBody => 
				summary = "OpCode: OP_QUERY, " + summary + ", FullCollectionName: " + b.FullCollectionName.ToString();
			case b:OpGetMoreMsgBody => 
				summary = "OpCode: OP_QUERY, " + summary + ", FullCollectionName: " + b.FullCollectionName.ToString() + ", CursorID: " + b.CursorID.ToString();
			case b:OpDeleteMsgBody => 
				summary = "OpCode: OP_DELETE, " + summary + ", FullCollectionName: " + b.FullCollectionName.ToString();
			case b:OpKillCursorsMsgBody => 
				summary = "OpCode: OP_KILL_CURSORS, " + summary;
		}

		return summary;
	}
}

pattern OpCodeType = enum int
{
	OP_REPLY = 1, 
	OP_MSG = 1000, 
	OP_UPDATE = 2001, 
	OP_INSERT = 2002, 
	OP_QUERY = 2004, 
	OP_GET_MORE = 2005,
	OP_DELETE = 2006,
	OP_KILL_CURSORS = 2007,
	...
};

pattern MsgBody = OpReplyMsgBody 
	| OpMsgMsgBody
	| OpUpdateMsgBody
	| OpInsertMsgBody
	| OpQueryMsgBody
	| OpGetMoreMsgBody
	| OpDeleteMsgBody
	| OpKillCursorsMsgBody;

type OpReplyMsgBody
{
	(OpCodeType where value == OpCodeType.OP_REPLY) OpCode;
	ResponseFlags ResponseFlags;
	long CursorID;
	int StartingFrom;
	int NumberReturned;

	optional array<Document> Documents;
}

pattern ResponseFlags = flags int
{
	CursorNotFound = 0x01,
	QueryFailure = 0x02, 
	ShardConfigStale = 0x04, 
	AwaitCapable = 0x08,
	...
};

type OpMsgMsgBody
{
	(OpCodeType where value == OpCodeType.OP_MSG) OpCode;
	CString Message;
}

type OpUpdateMsgBody
{
	(OpCodeType where value == OpCodeType.OP_UPDATE) OpCode;
	int Zero;
	CString FullCollectionName;
	UpdateFlags Flags;
	Document Selector;
	Document Update;
}

pattern UpdateFlags = flags int
{
	Upsert = 0x01,
	MultiUpdate = 0x10,
	...
};

type OpInsertMsgBody
{
	(OpCodeType where value == OpCodeType.OP_INSERT) OpCode;
	InsertFlags Flags;
	CString FullCollectionName;
	array<Document> Documents;
}

pattern InsertFlags = flags int
{
	ContinueOnError = 0x01
};

type OpQueryMsgBody
{
	(OpCodeType where value == OpCodeType.OP_QUERY) OpCode;
	QueryFlags Flags;
	CString FullCollectionName;
	int NumberToSkip;
	int NumberToReturn;

	Document Query;
	optional Document ReturnFieldsSelector;
}

pattern QueryFlags = flags int
{
	TailableCursor = 0x02,
	SlaveOk = 0x04,
	OplogReply = 0x08,
	NoCursorTimeout = 0x10,
	AwaitData = 0x20,
	Exhaust = 0x40,
	Partial = 0x80,
	...
};

type OpGetMoreMsgBody
{
	(OpCodeType where value == OpCodeType.OP_GET_MORE) OpCode;
	int Zero;
	CString FullCollectionName;
	int NumberToReturn;
	long CursorID;
}

type OpDeleteMsgBody
{
	(OpCodeType where value == OpCodeType.OP_DELETE) OpCode;
	int Zero;
	CString FullCollectionName;
	DeleteFlags Flags;
	Document Selector;
}

pattern DeleteFlags = flags int
{
	SingleRemove = 0x01,
	...
};

type OpKillCursorsMsgBody
{
	(OpCodeType where value == OpCodeType.OP_KILL_CURSORS) OpCode;
	int Zero;
	int NumberOfCursorIDs;
	array<long> CursorIDs with BinaryEncoding{Length=NumberOfCursorIDs};
}


// ---------------------------------- MongoDB Decoding ---------------------------------------
optional Message MongoDBDecoder(binary buffer)
{
	switch(buffer)
	{
		case m:Message from BinaryDecoder<Message> =>
			return m;
		default =>
			return nothing;
	}
}

type MongoDBDecodingHelper : TCPDecodingHelper
{
	void InitializeMongoDBDecodingHelper(any endpoint server, ushort localPort, ushort remotePort)
	{
		MongoDBDecodingCache acceptsCache = new MongoDBDecodingCache();
		MongoDBDecodingCache issuesCache = new MongoDBDecodingCache();

		this.Initialize(acceptsCache, issuesCache,
			"MongoDB", (endpoint MongoDB.Server over server),
			(binary b) => true /*isCurrentProtocol*/,
            (binary b) => 0 /*isSufficientForSingleMsg*/, 
            (stream s) => nothing /*decodeSingleMessage*/,
            (binary b) => nothing /*decodeIncompleteMessage*/);

        acceptsCache.mongoDBDecodingHelper = this;
        acceptsCache.localPort = localPort;
        acceptsCache.remotePort = remotePort;

        issuesCache.mongoDBDecodingHelper = this;
        issuesCache.localPort = localPort;
        acceptsCache.remotePort = remotePort;
	}
}

type MongoDBDecodingCache : TCPDecodingCache
{
	MongoDBDecodingHelper mongoDBDecodingHelper = null;
	ushort localPort;
	ushort remotePort;

	override void TryDecodeAndDispatchMessage()
    {
        assert Origins.Count > 0;
        
        switch (Buffer)
        {
            case m:Message from MongoDBDecoder =>
                m#IsRequest = Direction == MessageDirection.Accepts ? true : false;
                m#DestinationPort = Direction == MessageDirection.Accepts ? remotePort : localPort;
                m#SourcePort = Direction == MessageDirection.Accepts ? localPort : remotePort;
                
                m.Origins = Origins;
                DispatchMessage(m);
                CompleteMessages.Add(m, BufferStartSequenceNumber, BufferEndSequenceNumber);
                ResetAfterSucceed(null);
            default =>
                // actually, MongoDB Message will not decoding failed
                return;
        }
    }

}