using Diagnostics;

const string regex30OrLater = @"^(?<Timestamp>\S+)\s+(?<Severity>[DIWEF])\s+(?<Component>\S+)\s+(\[(?<Context>\S+)])?\s*(?<Message>.*)";
const string regex26 = @"^(?<Timestamp>\S+)\s+(\[(?<Context>\S+)])?\s*(?<Message>.*)";

message MongoDB30OrLaterEntry 
	with EntryInfo { Regex = regex30OrLater,
				     Multiline = HandleMultiline } : LogEntry
{
	DateTime Timestamp with EntryFieldInfo {IsTimestamp = true};
	string Severity;
	string Component;
	string Context;
	string Message;

	bool HandleMultiline(string line, LineContext context)
	{
		if (context.IsInitialLine)
		{
			return true;
		}

		if (line.Count > 0 && line[0] == ' ')
		{
			Message += line;
			return true;
		}

		return false;
	}
}

message MongoDB26Entry
	with EntryInfo { Regex = regex26,
				     Multiline = HandleMultiline } : LogEntry
{ 
	DateTime Timestamp with EntryFieldInfo {IsTimestamp = true};
	string Context;
	string Message;

	bool HandleMultiline(string line, LineContext context)
	{
		if (context.IsInitialLine)
		{
			return true;
		}

		if (line.Count > 0 && line[0] == ' ')
		{
			Message += line;
			return true;
		}

		return false;
	}
}